% Generated by IEEEtran.bst, version: 1.14 (2015/08/26)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{sieber2013foundations}
K.~Sieber, \emph{The foundations of program verification}.\hskip 1em plus 0.5em minus 0.4em\relax Springer-Verlag, 2013.

\bibitem{fetzer1988program}
J.~H. Fetzer, ``Program verification: The very idea,'' \emph{Communications of the ACM}, vol.~31, no.~9, pp. 1048--1063, 1988.

\bibitem{nelson1980techniques}
C.~G. Nelson, \emph{Techniques for program verification}.\hskip 1em plus 0.5em minus 0.4em\relax Stanford University, 1980.

\bibitem{srivastava2010program}
S.~Srivastava, S.~Gulwani, and J.~S. Foster, ``From program verification to program synthesis,'' in \emph{Proceedings of the 37th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages}, 2010, pp. 313--326.

\bibitem{almeida2011rigorous}
J.~B. Almeida, M.~J. Frade, J.~S. Pinto, and S.~M. De~Sousa, \emph{Rigorous software development: an introduction to program verification}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2011, vol.~1.

\bibitem{koopman2016challenges}
P.~Koopman and M.~Wagner, ``Challenges in autonomous vehicle testing and validation,'' \emph{SAE International Journal of Transportation Safety}, vol.~4, no.~1, pp. 15--24, 2016.

\bibitem{daw2014formal}
Z.~Daw, R.~Cleaveland, and M.~Vetter, ``Formal verification of software-based medical devices considering medical guidelines,'' \emph{International journal of computer assisted radiology and surgery}, vol.~9, pp. 145--153, 2014.

\bibitem{colombo2018industrial}
C.~Colombo and G.~J. Pace, ``Industrial experiences with runtime verification of financial transaction systems: lessons learnt and standing challenges,'' in \emph{Lectures on Runtime Verification: Introductory and Advanced Topics}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2018, pp. 211--232.

\bibitem{dreossi2019verifai}
T.~Dreossi, D.~J. Fremont, S.~Ghosh, E.~Kim, H.~Ravanbakhsh, M.~Vazquez-Chanlatte, and S.~A. Seshia, ``Verifai: A toolkit for the formal design and analysis of artificial intelligence-based systems,'' in \emph{International Conference on Computer Aided Verification}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2019, pp. 432--442.

\bibitem{rajaona2023program}
F.~Rajaona, I.~Boureanu, V.~Malvone, and F.~Belardinelli, ``Program semantics and verification technique for ai-centred programs,'' in \emph{International Symposium on Formal Methods}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2023, pp. 473--491.

\bibitem{hoare1969axiomatic}
C.~A.~R. Hoare, ``An axiomatic basis for computer programming,'' \emph{Communications of the ACM}, vol.~12, no.~10, pp. 576--580, 1969.

\bibitem{furia2014loop}
C.~A. Furia, B.~Meyer, and S.~Velder, ``Loop invariants: Analysis, classification, and examples,'' \emph{ACM Computing Surveys (CSUR)}, vol.~46, no.~3, pp. 1--51, 2014.

\bibitem{10.5555/3327757.3327873}
X.~Si, H.~Dai, M.~Raghothaman, M.~Naik, and L.~Song, ``Learning loop invariants for program verification,'' in \emph{Proceedings of the 32nd International Conference on Neural Information Processing Systems}, ser. NIPS'18.\hskip 1em plus 0.5em minus 0.4em\relax Red Hook, NY, USA: Curran Associates Inc., 2018, p. 7762–7773.

\bibitem{10.1145/3211968}
\BIBentryALTinterwordspacing
P.~O'Hearn, ``Separation logic,'' \emph{Commun. ACM}, vol.~62, no.~2, p. 86–95, jan 2019. [Online]. Available: \url{https://doi.org/10.1145/3211968}
\BIBentrySTDinterwordspacing

\bibitem{DBLP:journals/corr/PadhiM17}
\BIBentryALTinterwordspacing
S.~Padhi and T.~D. Millstein, ``Data-driven loop invariant inference with automatic feature synthesis,'' \emph{CoRR}, vol. abs/1707.02029, 2017. [Online]. Available: \url{http://arxiv.org/abs/1707.02029}
\BIBentrySTDinterwordspacing

\bibitem{DBLP:journals/corr/abs-1905-07457}
\BIBentryALTinterwordspacing
S.~Padhi, T.~D. Millstein, A.~V. Nori, and R.~Sharma, ``Overfitting in synthesis: Theory and practice (extended version),'' \emph{CoRR}, vol. abs/1905.07457, 2019. [Online]. Available: \url{http://arxiv.org/abs/1905.07457}
\BIBentrySTDinterwordspacing

\bibitem{DBLP:conf/frocos/EchenimPS19}
\BIBentryALTinterwordspacing
M.~Echenim, N.~Peltier, and Y.~Sellami, ``Ilinva: Using abduction to generate loop invariants,'' in \emph{Frontiers of Combining Systems - 12th International Symposium, FroCoS 2019, London, UK, September 4-6, 2019, Proceedings}, ser. Lecture Notes in Computer Science, A.~Herzig and A.~Popescu, Eds., vol. 11715.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2019, pp. 77--93. [Online]. Available: \url{https://doi.org/10.1007/978-3-030-29007-8\_5}
\BIBentrySTDinterwordspacing

\bibitem{DBLP:conf/pldi/LeZN19}
\BIBentryALTinterwordspacing
T.~C. Le, G.~Zheng, and T.~Nguyen, ``{SLING:} using dynamic analysis to infer program invariants in separation logic,'' in \emph{Proceedings of the 40th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation, {PLDI} 2019, Phoenix, AZ, USA, June 22-26, 2019}, K.~S. McKinley and K.~Fisher, Eds.\hskip 1em plus 0.5em minus 0.4em\relax {ACM}, 2019, pp. 788--801. [Online]. Available: \url{https://doi.org/10.1145/3314221.3314634}
\BIBentrySTDinterwordspacing

\bibitem{SLING}
\BIBentryALTinterwordspacing
``Sling benchmark.'' [Online]. Available: \url{https://github.com/guolong-zheng/sling}
\BIBentrySTDinterwordspacing

\bibitem{chakraborty2023ranking}
S.~Chakraborty \emph{et~al.}, ``Ranking llm-generated loop invariants for program verification,'' 2023.

\bibitem{DBLP:conf/popl/0001NMR16}
\BIBentryALTinterwordspacing
P.~Garg, D.~Neider, P.~Madhusudan, and D.~Roth, ``Learning invariants using decision trees and implication counterexamples,'' in \emph{Proceedings of the 43rd Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of Programming Languages, {POPL} 2016, St. Petersburg, FL, USA, January 20 - 22, 2016}, R.~Bod{\'{\i}}k and R.~Majumdar, Eds.\hskip 1em plus 0.5em minus 0.4em\relax {ACM}, 2016, pp. 499--512. [Online]. Available: \url{https://doi.org/10.1145/2837614.2837664}
\BIBentrySTDinterwordspacing

\bibitem{lin2017fib}
S.-W. Lin, J.~Sun, H.~Xiao, Y.~Liu, D.~San{\'a}n, and H.~Hansen, ``Fib: Squeezing loop invariants by interpolation between forward/backward predicate transformers,'' in \emph{2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2017, pp. 793--803.

\bibitem{10.1145/3385412.3385986}
\BIBentryALTinterwordspacing
J.~Yao, G.~Ryan, J.~Wong, S.~Jana, and R.~Gu, ``Learning nonlinear loop invariants with gated continuous logic networks,'' in \emph{Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation}, ser. PLDI 2020.\hskip 1em plus 0.5em minus 0.4em\relax New York, NY, USA: Association for Computing Machinery, 2020, p. 106–120. [Online]. Available: \url{https://doi.org/10.1145/3385412.3385986}
\BIBentrySTDinterwordspacing

\bibitem{DBLP:journals/corr/abs-2205-14229}
\BIBentryALTinterwordspacing
J.~Laurent and A.~Platzer, ``Learning to find proofs and theorems by learning to refine search strategies,'' \emph{CoRR}, vol. abs/2205.14229, 2022. [Online]. Available: \url{https://doi.org/10.48550/arXiv.2205.14229}
\BIBentrySTDinterwordspacing

\bibitem{pei2023can}
K.~Pei, D.~Bieber, K.~Shi, C.~Sutton, and P.~Yin, ``Can large language models reason about program invariants?'' 2023.

\bibitem{ryan2019cln2inv}
G.~Ryan, J.~Wong, J.~Yao, R.~Gu, and S.~Jana, ``Cln2inv: learning loop invariants with continuous logic networks,'' \emph{arXiv preprint arXiv:1909.11542}, 2019.

\bibitem{wen2024enchanting}
C.~Wen, J.~Cao, J.~Su, Z.~Xu, S.~Qin, M.~He, H.~Li, S.-C. Cheung, and C.~Tian, ``Enchanting program specification synthesis by large language models using static analysis and program verification,'' \emph{arXiv preprint arXiv:2404.00762}, 2024.

\bibitem{SVCOMP}
\BIBentryALTinterwordspacing
``Sv-comp benchmark.'' [Online]. Available: \url{https://gitlab.com/sosy-lab/benchmarking/sv-benchmarks/-/tree/main/c}
\BIBentrySTDinterwordspacing

\bibitem{Linux}
\BIBentryALTinterwordspacing
``Source code of linux kernel.'' [Online]. Available: \url{https://github.com/torvalds/linux/}
\BIBentrySTDinterwordspacing

\bibitem{GlibC}
\BIBentryALTinterwordspacing
``Source code of glibc.'' [Online]. Available: \url{https://github.com/kraj/glibc/blob/master/}
\BIBentrySTDinterwordspacing

\bibitem{liteos}
\BIBentryALTinterwordspacing
``Source code of liteos.'' [Online]. Available: \url{https://gitee.com/openharmony/kernel_liteos_m}
\BIBentrySTDinterwordspacing

\bibitem{Zephyr}
\BIBentryALTinterwordspacing
``Source code of zephyr.'' [Online]. Available: \url{https://github.com/zephyrproject-rtos/zephyr}
\BIBentrySTDinterwordspacing

\bibitem{SurveySymExec-CSUR18}
R.~Baldoni, E.~Coppa, D.~C. D'Elia, C.~Demetrescu, and I.~Finocchi, ``A survey of symbolic execution techniques,'' \emph{ACM Comput. Surv.}, vol.~51, no.~3, 2018.

\bibitem{10.1007/978-3-030-99527-0_20}
\BIBentryALTinterwordspacing
D.~Beyer, ``Progress on software verification: Sv-comp 2022,'' in \emph{Tools and Algorithms for the Construction and Analysis of Systems: 28th International Conference, TACAS 2022, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2022, Munich, Germany, April 2–7, 2022, Proceedings, Part II}.\hskip 1em plus 0.5em minus 0.4em\relax Berlin, Heidelberg: Springer-Verlag, 2022, p. 375–402. [Online]. Available: \url{https://doi.org/10.1007/978-3-030-99527-0_20}
\BIBentrySTDinterwordspacing

\bibitem{nijkamp2022codegen}
E.~Nijkamp, B.~Pang, H.~Hayashi, L.~Tu, H.~Wang, Y.~Zhou, S.~Savarese, and C.~Xiong, ``Codegen: An open large language model for code with multi-turn program synthesis,'' \emph{arXiv preprint arXiv:2203.13474}, 2022.

\bibitem{nijkamp2023codegen2}
E.~Nijkamp, H.~Hayashi, C.~Xiong, S.~Savarese, and Y.~Zhou, ``Codegen2: Lessons for training llms on programming and natural languages,'' \emph{arXiv preprint arXiv:2305.02309}, 2023.

\bibitem{cao2023comprehensive}
Y.~Cao, S.~Li, Y.~Liu, Z.~Yan, Y.~Dai, P.~S. Yu, and L.~Sun, ``A comprehensive survey of ai-generated content (aigc): A history of generative ai from gan to chatgpt,'' \emph{arXiv preprint arXiv:2303.04226}, 2023.

\bibitem{chen2023teaching}
X.~Chen, M.~Lin, N.~Sch{\"a}rli, and D.~Zhou, ``Teaching large language models to self-debug,'' \emph{arXiv preprint arXiv:2304.05128}, 2023.

\bibitem{li2023starcoder}
R.~Li, L.~B. Allal, Y.~Zi, N.~Muennighoff, D.~Kocetkov, C.~Mou, M.~Marone, C.~Akiki, J.~Li \emph{et~al.}, ``Starcoder: may the source be with you!'' \emph{arXiv preprint arXiv:2305.06161}, 2023.

\bibitem{openai2023gpt}
R.~OpenAI, ``Gpt-4 technical report. arxiv 2303.08774,'' \emph{View in Article}, vol.~2, no.~5, 2023.

\bibitem{pldi/2016/PadhiSM}
\BIBentryALTinterwordspacing
S.~Padhi, R.~Sharma, and T.~D. Millstein, ``Data-driven precondition inference with learned features,'' in \emph{Proceedings of the 37th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation, {PLDI} 2016, Santa Barbara, CA, USA, June 13-17, 2016}, 2016, pp. 42--56. [Online]. Available: \url{http://doi.acm.org/10.1145/2908080.2908099}
\BIBentrySTDinterwordspacing

\bibitem{padhi2016data}
S.~Padhi, R.~Sharma, and T.~Millstein, ``Data-driven precondition inference with learned features,'' \emph{ACM SIGPLAN Notices}, vol.~51, no.~6, pp. 42--56, 2016.

\bibitem{filliatre2013why3}
J.-C. Filli{\^a}tre and A.~Paskevich, ``Why3—where programs meet provers,'' in \emph{Programming Languages and Systems: 22nd European Symposium on Programming, ESOP 2013, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2013, Rome, Italy, March 16-24, 2013. Proceedings 22}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2013, pp. 125--128.

\bibitem{echenim2018generic}
M.~Echenim, N.~Peltier, and Y.~Sellami, ``A generic framework for implicate generation modulo theories,'' in \emph{Automated Reasoning: 9th International Joint Conference, IJCAR 2018, Held as Part of the Federated Logic Conference, FloC 2018, Oxford, UK, July 14-17, 2018, Proceedings 9}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2018, pp. 279--294.

\bibitem{kenison2023polynomial}
G.~Kenison, L.~Kov{\'a}cs, and A.~Varonka, ``From polynomial invariants to linear loops,'' \emph{arXiv preprint arXiv:2302.06323}, 2023.

\bibitem{de2008z3}
L.~De~Moura and N.~Bj{\o}rner, ``Z3: An efficient smt solver,'' in \emph{International conference on Tools and Algorithms for the Construction and Analysis of Systems}.\hskip 1em plus 0.5em minus 0.4em\relax Springer, 2008, pp. 337--340.

\bibitem{laurent2022learning}
J.~Laurent and A.~Platzer, ``Learning to find proofs and theorems by learning to refine search strategies: The case of loop invariant synthesis,'' \emph{Advances in Neural Information Processing Systems}, vol.~35, pp. 4843--4856, 2022.

\bibitem{yao2020learning}
J.~Yao, G.~Ryan, J.~Wong, S.~Jana, and R.~Gu, ``Learning nonlinear loop invariants with gated continuous logic networks,'' in \emph{Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation}, 2020, pp. 106--120.

\bibitem{wang2021codet5}
Y.~Wang, W.~Wang, S.~Joty, and S.~C. Hoi, ``Codet5: Identifier-aware unified pre-trained encoder-decoder models for code understanding and generation,'' \emph{arXiv:2109.00859}, 2021.

\bibitem{devlin2018bert}
J.~Devlin, M.-W. Chang, K.~Lee, and K.~Toutanova, ``Bert: Pre-training of deep bidirectional transformers for language understanding,'' \emph{arXiv preprint arXiv:1810.04805}, 2018.

\bibitem{openai2023gpt4}
OpenAI, ``Gpt-4 technical report,'' 2023.

\bibitem{ernst2007daikon}
M.~D. Ernst, J.~H. Perkins, P.~J. Guo, S.~McCamant, C.~Pacheco, M.~S. Tschantz, and C.~Xiao, ``The daikon system for dynamic detection of likely invariants,'' \emph{Science of computer programming}, vol.~69, no. 1-3, pp. 35--45, 2007.

\bibitem{cubuk1805autoaugment}
E.~D. Cubuk, B.~Zoph, D.~Mane, V.~Vasudevan, and Q.~V. Le, ``Autoaugment: Learning augmentation policies from data. arxiv 2018,'' \emph{arXiv preprint arXiv:1805.09501}, 1805.

\bibitem{bayer2022survey}
M.~Bayer, M.-A. Kaufhold, and C.~Reuter, ``A survey on data augmentation for text classification,'' \emph{ACM Computing Surveys}, vol.~55, no.~7, pp. 1--39, 2022.

\bibitem{yun2019cutmix}
S.~Yun, D.~Han, S.~J. Oh, S.~Chun, J.~Choe, and Y.~Yoo, ``Cutmix: Regularization strategy to train strong classifiers with localizable features,'' in \emph{Proceedings of the IEEE/CVF international conference on computer vision}, 2019, pp. 6023--6032.

\bibitem{zhang2017mixup}
H.~Zhang, M.~Cisse, Y.~N. Dauphin, and D.~Lopez-Paz, ``mixup: Beyond empirical risk minimization,'' \emph{arXiv preprint arXiv:1710.09412}, 2017.

\end{thebibliography}
